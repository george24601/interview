-------
Given a set of possibly overlapping rectangles in different levels (All of which are "not rotated", can be uniformly represented as (left-bottom,right-top) tuplets), return a minimal set of (non-rotated) non-overlapping rectangles, that occupy the same area. 
The rectangle at lower level has more priority than at higher levels.
------
tokenize string, "" and [] are token flags, such as 
mytable "foo" [bar] "" [[[[]]]. 

"" Turned into ",]] turned into], [[not escaped 
The results of the example given above: 
mytable 
foo 
bar " 
[[] 
public List<String> tokenizestring(String s){ 
}

--------

Create an iterator class that stores a list of the built-in Iterators. 
Implement the next() and hasNext() methods in a Round Robin pattern (pops next element in a circle). 
Example: 
Given a list [iterator1,iterator2, iterator3...] 
when calling RoundIterator.next() 
pops iterator1.next if iterator1.hasNext() is true 
when calling RoundIterator.next() 
pops iterator2.next() if iterator2.hasNext() is true 
when calling RoundIterator.next() 
pops iterator3.next if iterator3.hasNext() is true 
... 
when calling RoundIterator.next() 
pops iterator1.next if iterator1.hasNext() is true 
when calling RoundIterator.next() 
pops iterator2.next if iterator2.hasNext() is true 
when calling RoundIterator.next() 
pops iterator3.next if iterator3.hasNext() is true 
... 
until there is no more element in any of the iterators

-------
n points on a 2D space. You observe the points from (0,0) with viewing direction and viewing angle. 
Given an array (xn,yn), and a viewing angle v (45 degree), find the direction that can observe max number of points.
------

