--------
Migrating our core product's calculation engine from RDBMS to data warehouse
1. Most Challenging
Scenario:
No one knows how to use the data warehouse with very little information available online, while racing against clock to satify a big client 
Action:
Requested internal educational material from the management. 
Use the DW team's support line to ask as many problems as I can.
Talked to a thrid team in a remote location so that I can have a DW box to do a POC even before we place an order to buy one
Result:
We quickly understand the major risks points when using this products. We still have to design and redesign around those risk points, but no new "unknown unknown" discovered in the later process

2. What You Learned
Need to keep technical debt of code base low. It is ok to sacrifice code quality to address immediate business need, but need to remember to fix them later 
One of the best ways to convince others is to use data and evidence. The process of getting those data and evidence helps you understand the problem too.
Even under huge pressure, try not to let your negative emotion to affect others. It will bring down others' productivities
Enforce cross-checks on works when it could affect other people's decisions.

3.Most Interesting
Scenario: 
Data warehouse does not support decimal arithmetics, but we have 100+ huge queries involves decimal arithmetics, so we had to process them in memory - very slow and is the bottleneck of the whole process - 50% of total processing time.
Action: 
I wrote a decimal plus and mutiplicaiton in c++ so that I can register the function binaries on the DW and give it decimal processing capabilities. I had to go through the source code of the DW in c to figure out which header file I use. 
Result:
With those UDF functions, procesing times is reduced to < 1% of before

4.Hardest Bug
Scenario:
The whole calculation process has 3000+ steps, but the final result is 1 million dollar off compared to the previous version
Action:
I wrote a small tool to traverse the dependency DAG and find the root step that has different checksums, and reverse engineer the row that is off to understand sequence of actions
Result:
Find a rarely-called legacy code that has the order of operand's filpped. This code is covered by integration testing 
 
5.Enjoyed Most
Sense of ownership. From archtectural design, to implementation, to testing and roll out, I am the only developer that knows all the catches.

6.Conflicts with Teammates
Scenario:
Architechtrual disagreement. I disagree the architecture decided by my manager
Action:
I convince the manager to allow me to performance testing to prove the orignal architecture is not going to work, and another POC and feasiblity analysis to show why mine could work.
Result:
We switch to the architecture I proposed.

7.Challenging interaction
Scenario:
During my feasibility report, I underestimated the workload by a factor of 3. My VP was angry and yelled at me in his office. 
Action:
I apologize for what I need. With our voices shaken, we say we are going to solve the problem. I immediately go back to desk to see if reanaylze the old conclusions is still feasible
Result:
My old analysis is still feasible

8.Failure
Scenario:
Yelled at a teammate who made a careless mistake without testing and cost me a night of sleep, while I have to give a status update to the client the next morning 
Action:
I apologized and took the team, including the teammate, to the best steakhouse in Toronto, out of my own pockets
Result:
Still keep in touch with that teammate and joke around on a regular basis

9.Success
Scenario:
Able to satisfy SLA. Production run is stable with only minimal amount of human interaction, mostly to address the sharding key issue. 
Action:
Make sure I give credit to the whole team, and everyone who has worked on the project.


------------
Build real time ingestion and stream joins capabilties from scratch

1. Most Challenging
Scenario:
Use technology not many people don't have prod experience with,  yet our end result is visible to everyone using the main website
Action:
Read blog post about the technoloy as much as I can and write notes 
Look into the source code repo of the techs we use, espeically their test and demo folder
Go to corresponding google groups and ask questions to devs
Result:
Quickly identified bugs in the open source projects. How it is used and common usage pattern. Made the decision our usage is different shouldn't stay too far away from common usage pattern

2.What You Learned
Hand-on HA, DR, distriuted system, and monitoring experience. Full stack ownership.

3.Most Interesting
Scenario:
Implement a 4-way stream join with no existing examples. 
Action:
Have to design it based on my understanding of the technology, and other people's blog post of simpler cases. Break down the problem and ask the simplified version on google groups
Result:
Turns out my use case is something the devs are considering to add too.As for product, Stable and has been in prod ever since.

4.Hardest Bug
Scenario:
The client agent I wrote flushes data every 150 ms, and when we start agents in parallel, it quickly overwhelms the memory of schema server
Action:
I am unable to reproduce it in our dev environment, but that server needs to be HA. 
Read the source code the schema server and see the bug, but it is fixed in a giant PR. 
Result: 
Set up monitoring rule so that when the client side does mass rollout, we will just do a rolling restart on the schema servers. Not ideally but solves the business problem

5.Enjoyed Most
Full stack ownership on features affects our whole Indian use base.

6.Conflicts with Teammates
Scenario: 
Technology architecture design.
Action:
Doing a design competition to see each alternative's pros and cons
Result: 
we end up with a hybrid approach - different technoloy for different parts

7.Challenging interaction
Scenario: 
For the client agent I opt for a MVP design, trade flexibility for stability. Our CTO is not happy about that decision
Action:
1.Explain that I don't want the implementation the first step of ingestion to become bottleneck
2.Plan to introduce the flexible design in v2.
Result:
MVP approach is stable, but never had chance to implement v2.

8.Failure
Scenario:
MVP approach is stable, and never had chance to implement v2, but we have more feature requests on the client agent
Action:
As a result we keep building on the MVP's less flexible design. 
Result:
User has to update the jar if they want to get the new schemas, and they have knowledge to other team's schema too.
Moreover, every time other team wants to add schemas we are affected

9.Success
Stable run of the streaming pipeline for 3 months with result seen by every single user of the main website
